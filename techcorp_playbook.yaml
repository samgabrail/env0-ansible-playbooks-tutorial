---
- name: Configure Web Servers
  hosts: webservers
  become: yes
  vars:
    domain: techcorp.com
  tasks:
    - name: Install Apache
      apt:
        name: apache2
        state: latest
      notify:
        - Restart Apache

    - name: Ensure Apache is running
      service:
        name: apache2
        state: started
        enabled: true

    - name: Deploy Apache config file
      template:
        src: templates/apache.conf.j2
        dest: /etc/apache2/sites-available/{{ domain }}.conf

    - name: Enable Apache site
      command: a2ensite {{ domain }}.conf
      notify:
        - Reload Apache

    - name: Create document root
      file:
        path: /var/www/{{ domain }}
        state: directory
        owner: www-data
        group: www-data
        mode: '0755'

    - name: Copy Flask application
      copy:
        src: files/app.py
        dest: /var/www/{{ domain }}/app.py
      notify: Restart Apache

    - name: Create WSGI file
      copy:
        content: |
          import sys
          sys.path.insert(0, '/var/www/{{ domain }}')
          from app import app as application
        dest: /var/www/{{ domain }}/app.wsgi
      notify: Restart Apache

    - name: Restart Apache
      service:
        name: apache2
        state: restarted

    - name: Wait for Apache to start
      wait_for:
        port: 80
        delay: 10
        timeout: 30

    - name: Fetch webpage content
      uri:
        url: "http://localhost"
        return_content: yes
      register: webpage
      ignore_errors: yes

    - name: Display webpage content
      debug:
        var: webpage.content
      tags: test_flask

  handlers:
    - name: Reload Apache
      service:
        name: apache2
        state: reloaded

    - name: Restart Apache
      service:
        name: apache2
        state: restarted

- name: Configure Database Server
  hosts: dbservers
  become: yes
  vars:
    postgresql_version: "{{ postgresql_version | default('14') }}"
  tasks:
    - name: Install PostgreSQL
      apt:
        name: postgresql
        state: latest
      notify:
        - Restart PostgreSQL

    - name: Ensure PostgreSQL is running
      service:
        name: postgresql
        state: started
        enabled: true

    - name: Get PostgreSQL version
      command: psql --version
      register: psql_version
      changed_when: false

    - name: Set PostgreSQL version
      set_fact:
        postgresql_version: "{{ psql_version.stdout | regex_search('\\d+') }}"

    - name: Configure PostgreSQL
      template:
        src: templates/pg_hba.conf.j2
        dest: "/etc/postgresql/{{ postgresql_version }}/main/pg_hba.conf"
      notify:
        - Reload PostgreSQL

  handlers:
    - name: Reload PostgreSQL
      service:
        name: postgresql
        state: reloaded

    - name: Restart PostgreSQL
      service:
        name: postgresql
        state: restarted
