---
- name: Configure Web Servers
  hosts: webservers
  become: yes
  vars:
    domain: techcorp.com
  tasks:
    - name: Install required packages
      apt:
        name: 
          - apache2
          - libapache2-mod-wsgi-py3
          - python3-pip
          - python3-psycopg2
        state: latest
      notify:
        - Restart Apache

    - name: Install Flask
      pip:
        name: flask
        state: latest

    - name: Install Apache
      apt:
        name: apache2
        state: latest
      notify:
        - Restart Apache

    - name: Ensure Apache is running
      service:
        name: apache2
        state: started
        enabled: true

    - name: Enable Apache site
      command: a2ensite {{ domain }}.conf
      notify:
        - Reload Apache

    - name: Create document root
      file:
        path: /var/www/{{ domain }}
        state: directory
        owner: www-data
        group: www-data
        mode: '0755'

    - name: Copy Flask application
      copy:
        src: files/app.py
        dest: /var/www/{{ domain }}/app.py

    - name: Create templates directory
      file:
        path: /var/www/{{ domain }}/templates
        state: directory

    - name: Copy HTML template
      copy:
        src: templates/index.html
        dest: /var/www/{{ domain }}/templates/index.html

    - name: Configure Apache to serve Flask app
      template:
        src: templates/apache_flask.conf.j2
        dest: /etc/apache2/sites-available/{{ domain }}.conf
      notify:
        - Reload Apache

    - name: Create WSGI file
      copy:
        content: |
          import sys
          sys.path.insert(0, '/var/www/techcorp.com')
          from app import app as application
        dest: /var/www/techcorp.com/app.wsgi
      notify: Restart Apache

    - name: Enable WSGI module
      apache2_module:
        name: wsgi
        state: present
      notify: Restart Apache

    - name: Restart Apache
      service:
        name: apache2
        state: restarted

    - name: Disable default Apache site
      command: a2dissite 000-default.conf
      notify: Reload Apache

    - name: Remove default Apache site configuration
      file:
        path: /etc/apache2/sites-available/000-default.conf
        state: absent
      notify: Reload Apache

  handlers:
    - name: Reload Apache
      service:
        name: apache2
        state: reloaded

    - name: Restart Apache
      service:
        name: apache2
        state: restarted

- name: Configure Database Server
  hosts: dbservers
  become: yes  # Add this line to enable sudo for all tasks by default
  vars:
    postgresql_version: "{{ postgresql_version | default('14') }}"
  tasks:
    - name: Install PostgreSQL
      apt:
        name: postgresql
        state: latest

    - name: Ensure PostgreSQL is listening on all interfaces
      lineinfile:
        path: "/etc/postgresql/{{ postgresql_version }}/main/postgresql.conf"
        regexp: '^listen_addresses\s*='
        line: "listen_addresses = '*'"
      notify: Restart PostgreSQL


    - name: Ensure PostgreSQL is started and enabled
      systemd:
        name: postgresql
        state: started
        enabled: yes

    - name: Get PostgreSQL version
      command: sudo -u postgres psql --version
      register: psql_version
      changed_when: false

    - name: Set PostgreSQL version
      set_fact:
        postgresql_version: "{{ psql_version.stdout | regex_search('\\d+') }}"

    - name: Configure PostgreSQL
      template:
        src: templates/pg_hba.conf.j2
        dest: "/etc/postgresql/{{ postgresql_version }}/main/pg_hba.conf"
      notify:
        - Reload PostgreSQL

    - name: Allow vagrant user to sudo as postgres without password
      lineinfile:
        path: /etc/sudoers
        state: present
        regexp: '^vagrant ALL=\(postgres\) NOPASSWD: ALL'
        line: 'vagrant ALL=(postgres) NOPASSWD: ALL'
        validate: 'visudo -cf %s'

    - name: Ensure postgres group has necessary permissions
      file:
        path: /var/run/postgresql
        state: directory
        group: postgres
        mode: '0775'

    - name: Check if database exists
      command: sudo -u postgres psql -tAc "SELECT 1 FROM pg_database WHERE datname='myapp'"
      register: db_exists
      changed_when: false

    - name: Create a new database
      command: sudo -u postgres createdb myapp
      when: db_exists.stdout == ""

    - name: Check if user exists
      command: sudo -u postgres psql -tAc "SELECT 1 FROM pg_roles WHERE rolname='myapp'"
      register: user_exists
      changed_when: false

    - name: Create a new PostgreSQL user
      command: sudo -u postgres psql -c "CREATE USER myapp WITH PASSWORD 'myapppassword';"
      when: user_exists.stdout == ""

    - name: Grant privileges to user
      command: sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE myapp TO myapp;"
      when: user_exists.stdout == ""

    - name: Create a sample table
      command: sudo -u postgres psql -d myapp -c "CREATE TABLE IF NOT EXISTS items (id serial primary key, name varchar(100));"

    - name: Insert sample data
      command: sudo -u postgres psql -d myapp -c "INSERT INTO items (name) SELECT 'Item ' || generate_series(1,3) WHERE NOT EXISTS (SELECT 1 FROM items);"

    - name: Grant privileges to myapp user
      become_user: postgres
      community.postgresql.postgresql_query:
        db: myapp
        query: |
          GRANT ALL PRIVILEGES ON DATABASE myapp TO myapp;
          GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO myapp;
          GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO myapp;

  handlers:
    - name: Reload PostgreSQL
      service:
        name: postgresql
        state: reloaded

    - name: Restart PostgreSQL
      systemd:
        name: postgresql
        state: restarted

- name: Test Web Application
  hosts: webservers
  become: yes
  tasks:
    - name: Ensure Apache is restarted
      meta: flush_handlers

    - name: Wait for Apache to start
      wait_for:
        port: 80
        delay: 5
        timeout: 30

    - name: Fetch webpage content
      uri:
        url: "http://localhost"
        return_content: yes
      register: webpage
      ignore_errors: yes

    - name: Display webpage content
      debug:
        var: webpage.content
      tags: test_flask
